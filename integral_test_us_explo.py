#!/usr/bin/env python3

import requests
import sys
import json
import time
import os
from datetime import datetime

class USExploIntegralTester:
    def __init__(self, base_url="http://localhost:8001/api"):
        self.base_url = base_url
        self.tests_run = 0
        self.tests_passed = 0
        self.auth_token = None
        self.user_data = None
        self.fifi_ribana_user_token = None
        self.fifi_ribana_user_data = None
        self.created_song_id = None
        self.created_campaign_id = None
        self.chat_session_id = None

    def run_test(self, name, method, endpoint, expected_status, data=None, params=None, auth_required=False):
        """Run a single API test"""
        url = f"{self.base_url}/{endpoint}" if endpoint else self.base_url
        headers = {'Content-Type': 'application/json'}
        
        # Add auth header if required and available
        if auth_required and self.auth_token:
            headers['Authorization'] = f'Bearer {self.auth_token}'

        self.tests_run += 1
        print(f"\nüîç Testing {name}...")
        print(f"   URL: {url}")
        
        try:
            if method == 'GET':
                response = requests.get(url, headers=headers, params=params)
            elif method == 'POST':
                response = requests.post(url, json=data, headers=headers)
            elif method == 'PUT':
                response = requests.put(url, json=data, headers=headers)
            elif method == 'DELETE':
                response = requests.delete(url, headers=headers)

            success = response.status_code == expected_status
            if success:
                self.tests_passed += 1
                print(f"‚úÖ Passed - Status: {response.status_code}")
                try:
                    response_data = response.json()
                    print(f"   Response: {json.dumps(response_data, indent=2)[:300]}...")
                    return True, response_data
                except:
                    return True, {}
            else:
                print(f"‚ùå Failed - Expected {expected_status}, got {response.status_code}")
                try:
                    error_data = response.json()
                    print(f"   Error: {error_data}")
                except:
                    print(f"   Error: {response.text}")
                return False, {}

        except Exception as e:
            print(f"‚ùå Failed - Error: {str(e)}")
            return False, {}

    # ===== 1. SYST√àME D'AUTHENTIFICATION =====
    
    def test_create_fifi_ribana_account(self):
        """Test creating the founder account with unique timestamp"""
        import time
        timestamp = int(time.time())
        user_data = {
            "email": f"fifi_ribana_test_{timestamp}@usexplo.com",
            "username": f"fifi_ribana_{timestamp}",
            "password": "FifiRibana2025!"
        }
        
        success, response = self.run_test("Cr√©ation compte fondateur Fifi Ribana", "POST", "auth/register", 200, data=user_data)
        if success and 'access_token' in response:
            self.fifi_ribana_user_token = response['access_token']
            self.fifi_ribana_user_data = response['user']
            self.auth_token = response['access_token']  # Set main auth token
            print(f"   ‚úÖ Compte fondateur cr√©√©: {self.fifi_ribana_user_data['username']}")
            print(f"   Email: {self.fifi_ribana_user_data['email']}")
        return success

    def test_login_fifi_ribana(self):
        """Test login with founder account"""
        if not self.fifi_ribana_user_data:
            print("‚ùå No founder user data available")
            return False
            
        login_data = {
            "email": self.fifi_ribana_user_data['email'],
            "password": "FifiRibana2025!"
        }
        
        success, response = self.run_test("Connexion compte fondateur", "POST", "auth/login", 200, data=login_data)
        if success and 'access_token' in response:
            self.auth_token = response['access_token']
            print(f"   ‚úÖ Connexion r√©ussie pour: {response['user']['username']}")
        return success

    def test_get_user_profile(self):
        """Test getting current user profile with JWT token"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        success, response = self.run_test("R√©cup√©ration profil utilisateur JWT", "GET", "auth/me", 200, auth_required=True)
        if success:
            print(f"   ‚úÖ Profil r√©cup√©r√©: {response.get('username', 'N/A')}")
            print(f"   Email: {response.get('email', 'N/A')}")
        return success

    # ===== 2. SYST√àME D'IA COMPLET =====
    
    def test_ai_chat_french_conversation(self):
        """Test AI chat with French conversation about African music"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        chat_data = {
            "content": "Bonjour ! Peux-tu me parler de l'importance de la musique africaine dans le monde et comment US EXPLO contribue √† sa diffusion ?",
            "session_id": None
        }
        
        success, response = self.run_test("Chat IA - Conversation fran√ßaise sur musique africaine", "POST", "ai/chat", 200, data=chat_data, auth_required=True)
        if success:
            self.chat_session_id = response.get('session_id')
            print(f"   ‚úÖ Session IA cr√©√©e: {self.chat_session_id}")
            print(f"   R√©ponse IA: {response.get('content', 'N/A')[:200]}...")
        return success

    def test_ai_chat_us_explo_context(self):
        """Test AI chat with US EXPLO specific context"""
        if not self.auth_token or not self.chat_session_id:
            print("‚ùå No auth token or session available")
            return False
            
        chat_data = {
            "content": "Comment puis-je utiliser le marketplace d'US EXPLO pour vendre ma musique Bikutsi ? Quels sont les avantages des abonnements Premium ?",
            "session_id": self.chat_session_id
        }
        
        success, response = self.run_test("Chat IA - Contexte US EXPLO marketplace", "POST", "ai/chat", 200, data=chat_data, auth_required=True)
        if success:
            print(f"   ‚úÖ R√©ponse contextuelle IA: {response.get('content', 'N/A')[:200]}...")
        return success

    def test_ai_recommendations_generation(self):
        """Test AI recommendations generation"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        success, response = self.run_test("G√©n√©ration recommandations IA", "POST", "ai/recommendations/generate", 200, auth_required=True)
        if success:
            print(f"   ‚úÖ Recommandations g√©n√©r√©es: {len(response.get('recommendations', []))} items")
            for rec in response.get('recommendations', [])[:3]:
                print(f"   - {rec.get('content', {}).get('title', 'N/A')} ({rec.get('recommendation_type', 'N/A')})")
        return success

    def test_ai_composer_bikutsi_song(self):
        """Test AI composer with 'La musique unit les peuples'"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        song_data = {
            "inspiration_phrase": "La musique unit les peuples",
            "musical_style": "Bikutsi",
            "language": "fran√ßais",
            "mood": "√©nergique",
            "tempo": "mod√©r√©",
            "song_title": "Unis par la Musique"
        }
        
        success, response = self.run_test("Compositeur IA - Chanson Bikutsi 'La musique unit les peuples'", "POST", "ai/songs/create", 200, data=song_data, auth_required=True)
        if success:
            self.created_song_id = response.get('id')
            print(f"   ‚úÖ Chanson cr√©√©e: {response.get('title', 'N/A')}")
            print(f"   Style: {response.get('musical_style', 'N/A')}")
            print(f"   Paroles (extrait): {response.get('lyrics', 'N/A')[:150]}...")
            print(f"   Structure: {list(response.get('song_structure', {}).keys())}")
        return success

    def test_ai_automation_tasks(self):
        """Test AI automation tasks creation"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        task_data = {
            "task_type": "recommendation",
            "task_name": "Recommandations musicales hebdomadaires",
            "description": "G√©n√©ration automatique de recommandations personnalis√©es bas√©es sur les go√ªts musicaux africains",
            "schedule": "weekly",
            "config": {
                "focus_genres": ["Bikutsi", "Afrobeat", "Makossa", "Soukous"],
                "max_recommendations": 10
            }
        }
        
        success, response = self.run_test("Automatisation IA - T√¢ches utilisateur", "POST", "ai/automation/tasks", 200, data=task_data, auth_required=True)
        if success:
            print(f"   ‚úÖ T√¢che automatis√©e cr√©√©e: {response.get('task_name', 'N/A')}")
            print(f"   Fr√©quence: {response.get('schedule', 'N/A')}")
        return success

    # ===== 3. SYST√àME DE SOLIDARIT√â MUSICALE =====
    
    def test_solidarity_global_stats(self):
        """Test solidarity global statistics (public access)"""
        success, response = self.run_test("Statistiques globales solidarit√©", "GET", "solidarity/stats", 200)
        if success:
            print(f"   ‚úÖ Campagnes actives: {response.get('active_campaigns', 0)}")
            print(f"   Total donations: ‚Ç¨{response.get('total_donations', 0)}")
            print(f"   Conseils communautaires: {response.get('community_advice_count', 0)}")
            print(f"   Demandes d'aide: {response.get('support_requests_count', 0)}")
        return success

    def test_create_fifi_ribana_album_campaign(self):
        """Test creating 'Album Fifi Ribana' solidarity campaign"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        campaign_data = {
            "title": "Album Fifi Ribana - H√©ritage Musical Camerounais",
            "description": "Projet de cr√©ation d'un album hommage √† Fifi Ribana, pionnier de la musique camerounaise et fondateur d'US EXPLO. Cet album c√©l√©brera 50 ans de carri√®re musicale (1972-2025) et l'h√©ritage culturel du Bikutsi moderne.",
            "project_type": "album",
            "goal_amount": 15000.0,
            "deadline_days": 60,
            "story": "Fifi Ribana, n√© en 1952, a r√©volutionn√© la musique camerounaise en fusionnant le Bikutsi traditionnel avec des sonorit√©s modernes. Fondateur d'US EXPLO en 2025, il souhaite cr√©er un album testament de son parcours musical exceptionnel. Votre soutien permettra de financer l'enregistrement, le mixage et la promotion de cet h√©ritage musical unique.",
            "needs": ["Studio d'enregistrement professionnel", "Musiciens traditionnels", "Instruments authentiques (Balafon, Djemb√©)", "Mixage et mastering", "Promotion internationale"],
            "region": "Afrique",
            "music_style": "Bikutsi Moderne",
            "image_url": "https://example.com/fifi-ribana-album-campaign.jpg"
        }
        
        success, response = self.run_test("Cr√©ation campagne 'Album Fifi Ribana'", "POST", "solidarity/campaigns", 200, data=campaign_data, auth_required=True)
        if success:
            self.created_campaign_id = response.get('id')
            print(f"   ‚úÖ Campagne cr√©√©e: {response.get('title', 'N/A')}")
            print(f"   Objectif: ‚Ç¨{response.get('goal_amount', 0)}")
            print(f"   Dur√©e: {response.get('deadline_days', 0)} jours")
            print(f"   Besoins: {response.get('needs', [])}")
        return success

    def test_make_donation_to_campaign(self):
        """Test making a donation to the Fifi Ribana campaign"""
        if not self.auth_token or not self.created_campaign_id:
            print("‚ùå No auth token or campaign available")
            return False
            
        donation_data = {
            "campaign_id": self.created_campaign_id,
            "amount": 100.0,
            "donor_name": "Supporter US EXPLO",
            "message": "Ensemble nous sommes tr√®s forts ! üéµ Vive l'h√©ritage de Fifi Ribana et la musique camerounaise !",
            "is_anonymous": False
        }
        
        success, response = self.run_test("Donation campagne Fifi Ribana", "POST", "solidarity/donate", 200, data=donation_data, auth_required=True)
        if success:
            print(f"   ‚úÖ Donation effectu√©e: ‚Ç¨{response.get('amount', 0)}")
            print(f"   Message: {response.get('message', 'N/A')}")
            print(f"   Statut: {response.get('payment_status', 'N/A')}")
        return success

    def test_anonymous_donation(self):
        """Test making an anonymous donation"""
        if not self.created_campaign_id:
            print("‚ùå No campaign available")
            return False
            
        donation_data = {
            "campaign_id": self.created_campaign_id,
            "amount": 50.0,
            "donor_name": "Anonyme",
            "message": "La musique africaine m√©rite d'√™tre pr√©serv√©e et c√©l√©br√©e. Merci Fifi Ribana !",
            "is_anonymous": True
        }
        
        success, response = self.run_test("Donation anonyme", "POST", "solidarity/donate", 200, data=donation_data)
        if success:
            print(f"   ‚úÖ Donation anonyme: ‚Ç¨{response.get('amount', 0)}")
            print(f"   Donateur: {response.get('donor_name', 'N/A')}")
        return success

    def test_community_advice_creation(self):
        """Test creating community advice in different categories"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        advice_categories = [
            {
                "category": "spiritual",
                "title": "La m√©ditation avant la cr√©ation musicale",
                "content": "Avant chaque session de composition, prenez 10 minutes pour m√©diter et vous connecter √† vos racines culturelles. Cette pratique spirituelle enrichit la cr√©ativit√© et apporte une profondeur authentique √† votre musique africaine.",
                "target_audience": "all",
                "tags": ["m√©ditation", "cr√©ativit√©", "spiritualit√©", "composition"]
            },
            {
                "category": "creative",
                "title": "Fusion Bikutsi-moderne : techniques d'arrangement",
                "content": "Pour cr√©er une fusion r√©ussie entre Bikutsi traditionnel et sonorit√©s modernes : 1) Gardez la structure rythmique de base du Bikutsi, 2) Ajoutez des harmonies contemporaines, 3) Utilisez des instruments √©lectroniques en compl√©ment, jamais en remplacement des instruments traditionnels.",
                "target_audience": "professionals",
                "tags": ["Bikutsi", "fusion", "arrangement", "traditionnel", "moderne"]
            },
            {
                "category": "technical",
                "title": "Enregistrement du Balafon : conseils techniques",
                "content": "Pour un enregistrement optimal du Balafon : utilisez 2 micros condensateurs plac√©s √† 30cm au-dessus des lames, ajoutez un micro d'ambiance √† 2m pour capturer la r√©sonance naturelle. √âvitez la compression excessive qui d√©truit la dynamique naturelle de l'instrument.",
                "target_audience": "professionals",
                "tags": ["Balafon", "enregistrement", "technique", "micros", "studio"]
            }
        ]
        
        results = []
        for advice_data in advice_categories:
            success, response = self.run_test(f"Conseil communautaire - {advice_data['category']}", "POST", "solidarity/advice", 200, data=advice_data, auth_required=True)
            if success:
                print(f"   ‚úÖ Conseil cr√©√©: {response.get('title', 'N/A')}")
                print(f"   Cat√©gorie: {response.get('category', 'N/A')}")
            results.append(success)
        
        return all(results)

    def test_support_request_creation(self):
        """Test creating a support request"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        support_data = {
            "category": "creative",
            "title": "Besoin d'aide pour arrangement Bikutsi moderne",
            "description": "Je travaille sur un projet de fusion Bikutsi-√©lectronique et j'ai besoin de conseils pour l'arrangement. Comment int√©grer des synth√©tiseurs sans perdre l'essence traditionnelle du Bikutsi ? Quelqu'un a-t-il de l'exp√©rience dans ce domaine ?",
            "urgency": "normal"
        }
        
        success, response = self.run_test("Demande d'aide communautaire", "POST", "solidarity/support-request", 200, data=support_data, auth_required=True)
        if success:
            print(f"   ‚úÖ Demande cr√©√©e: {response.get('title', 'N/A')}")
            print(f"   Cat√©gorie: {response.get('category', 'N/A')}")
            print(f"   Urgence: {response.get('urgency', 'N/A')}")
        return success

    # ===== 4. MOTEUR DE RECHERCHE IA UNIVERSEL =====
    
    def test_traditional_search(self):
        """Test traditional search by terms"""
        search_queries = ["Bikutsi", "Fifi Ribana", "Cameroun", "Balafon"]
        
        results = []
        for query in search_queries:
            success, response = self.run_test(f"Recherche traditionnelle - '{query}'", "GET", "search", 200, params={"q": query})
            if success:
                total = response.get('total', 0)
                tracks = response.get('tracks', [])
                print(f"   ‚úÖ Trouv√© {total} r√©sultats pour '{query}'")
                for track in tracks[:2]:  # Show first 2
                    print(f"   - {track.get('title', 'N/A')} par {track.get('artist', 'N/A')}")
            results.append(success)
        
        return all(results)

    def test_ai_conversational_search(self):
        """Test AI conversational search"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        search_query = "Trouve-moi de la musique comme Fifi Ribana pour une f√™te camerounaise"
        chat_data = {
            "content": f"Recherche musicale : {search_query}",
            "session_id": self.chat_session_id
        }
        
        success, response = self.run_test("Recherche IA conversationnelle", "POST", "ai/chat", 200, data=chat_data, auth_required=True)
        if success:
            print(f"   ‚úÖ Recherche IA: {search_query}")
            print(f"   R√©ponse IA: {response.get('content', 'N/A')[:250]}...")
        return success

    def test_advanced_filters_search(self):
        """Test advanced search with multiple filters"""
        filter_combinations = [
            {"region": "Afrique", "style": "Bikutsi"},
            {"region": "Afrique", "mood": "√ânergique"},
            {"instrument": "Balafon", "style": "Traditional"}
        ]
        
        results = []
        for filters in filter_combinations:
            filter_desc = ", ".join([f"{k}={v}" for k, v in filters.items()])
            success, response = self.run_test(f"Recherche avanc√©e - {filter_desc}", "GET", "tracks", 200, params=filters)
            if success:
                tracks = response if isinstance(response, list) else []
                print(f"   ‚úÖ Trouv√© {len(tracks)} pistes avec filtres: {filter_desc}")
            results.append(success)
        
        return all(results)

    # ===== 5. FONCTIONNALIT√âS CORE EXISTANTES =====
    
    def test_music_tracks_system(self):
        """Test complete music tracks system"""
        # Get all tracks
        success1, response1 = self.run_test("Syst√®me pistes - R√©cup√©ration toutes pistes", "GET", "tracks", 200)
        
        # Get featured tracks
        success2, response2 = self.run_test("Syst√®me pistes - Pistes vedettes", "GET", "tracks", 200, params={"featured": True})
        
        # Get tracks by region
        success3, response3 = self.run_test("Syst√®me pistes - Filtrage par r√©gion Afrique", "GET", "tracks", 200, params={"region": "Afrique"})
        
        if success1 and success2 and success3:
            total_tracks = len(response1) if isinstance(response1, list) else 0
            featured_tracks = len(response2) if isinstance(response2, list) else 0
            africa_tracks = len(response3) if isinstance(response3, list) else 0
            
            print(f"   ‚úÖ Total pistes: {total_tracks}")
            print(f"   ‚úÖ Pistes vedettes: {featured_tracks}")
            print(f"   ‚úÖ Pistes Afrique: {africa_tracks}")
            
            # Show some African tracks
            if isinstance(response3, list) and response3:
                print("   Exemples pistes africaines:")
                for track in response3[:3]:
                    print(f"   - {track.get('title', 'N/A')} par {track.get('artist', 'N/A')} ({track.get('style', 'N/A')})")
        
        return success1 and success2 and success3

    def test_marketplace_functionality(self):
        """Test marketplace functionality"""
        # Get marketplace listings
        success1, response1 = self.run_test("Marketplace - R√©cup√©ration annonces", "GET", "marketplace/listings", 200)
        
        # Get with price filters
        success2, response2 = self.run_test("Marketplace - Filtrage par prix", "GET", "marketplace/listings", 200, params={"price_min": 5.0, "price_max": 20.0})
        
        if success1 and success2:
            total_listings = len(response1) if isinstance(response1, list) else 0
            filtered_listings = len(response2) if isinstance(response2, list) else 0
            
            print(f"   ‚úÖ Total annonces: {total_listings}")
            print(f"   ‚úÖ Annonces filtr√©es: {filtered_listings}")
            
            # Show some listings
            if isinstance(response1, list) and response1:
                print("   Exemples annonces:")
                for listing in response1[:2]:
                    track = listing.get('track', {})
                    print(f"   - {track.get('title', 'N/A')} - ‚Ç¨{listing.get('sale_price', 0)}")
        
        return success1 and success2

    def test_community_system(self):
        """Test community system"""
        # Get musicians
        success1, response1 = self.run_test("Communaut√© - Recherche musiciens", "GET", "community/musicians", 200)
        
        # Get community posts
        success2, response2 = self.run_test("Communaut√© - Posts communautaires", "GET", "community/posts", 200)
        
        # Get community groups
        success3, response3 = self.run_test("Communaut√© - Groupes communautaires", "GET", "community/groups", 200)
        
        if success1 and success2 and success3:
            musicians_count = len(response1) if isinstance(response1, list) else 0
            posts_count = len(response2) if isinstance(response2, list) else 0
            groups_count = len(response3) if isinstance(response3, list) else 0
            
            print(f"   ‚úÖ Musiciens: {musicians_count}")
            print(f"   ‚úÖ Posts: {posts_count}")
            print(f"   ‚úÖ Groupes: {groups_count}")
        
        return success1 and success2 and success3

    def test_subscription_system(self):
        """Test subscription system"""
        # Get subscription plans
        success1, response1 = self.run_test("Abonnements - Plans disponibles", "GET", "subscriptions/plans", 200)
        
        if success1 and isinstance(response1, list):
            print(f"   ‚úÖ Plans d'abonnement: {len(response1)}")
            for plan in response1:
                print(f"   - {plan.get('name', 'N/A')}: ‚Ç¨{plan.get('price_monthly', 0)}/mois")
                print(f"     Fonctionnalit√©s: {len(plan.get('features', []))}")
        
        return success1

    def test_collections_and_stats(self):
        """Test collections and statistics"""
        # Get collections
        success1, response1 = self.run_test("Collections - R√©cup√©ration", "GET", "collections", 200)
        
        # Get region stats
        success2, response2 = self.run_test("Statistiques - Par r√©gion", "GET", "regions/stats", 200)
        
        # Get style stats
        success3, response3 = self.run_test("Statistiques - Par style", "GET", "styles/stats", 200)
        
        if success1 and success2 and success3:
            collections_count = len(response1) if isinstance(response1, list) else 0
            regions_count = len(response2) if isinstance(response2, list) else 0
            styles_count = len(response3) if isinstance(response3, list) else 0
            
            print(f"   ‚úÖ Collections: {collections_count}")
            print(f"   ‚úÖ Statistiques r√©gions: {regions_count}")
            print(f"   ‚úÖ Statistiques styles: {styles_count}")
            
            # Show some stats
            if isinstance(response2, list) and response2:
                print("   Top r√©gions:")
                for region in response2[:3]:
                    print(f"   - {region.get('region', 'N/A')}: {region.get('track_count', 0)} pistes")
        
        return success1 and success2 and success3

    # ===== 6. PROFIL FONDATEUR FIFI RIBANA =====
    
    def test_fifi_ribana_profile_data(self):
        """Test Fifi Ribana founder profile and related data"""
        # Search for Fifi Ribana tracks
        success1, response1 = self.run_test("Profil Fifi Ribana - Recherche pistes", "GET", "search", 200, params={"q": "fifi ribana"})
        
        # Search for Simon Messela (alternative name)
        success2, response2 = self.run_test("Profil Fifi Ribana - Recherche Simon Messela", "GET", "search", 200, params={"q": "simon messela"})
        
        # Get Bikutsi tracks (Fifi Ribana's specialty)
        success3, response3 = self.run_test("Profil Fifi Ribana - Sp√©cialit√© Bikutsi", "GET", "tracks", 200, params={"style": "Bikutsi"})
        
        if success1 and success2 and success3:
            fifi_tracks = response1.get('total', 0) if isinstance(response1, dict) else 0
            simon_tracks = response2.get('total', 0) if isinstance(response2, dict) else 0
            bikutsi_tracks = len(response3) if isinstance(response3, list) else 0
            
            print(f"   ‚úÖ Pistes 'Fifi Ribana': {fifi_tracks}")
            print(f"   ‚úÖ Pistes 'Simon Messela': {simon_tracks}")
            print(f"   ‚úÖ Pistes Bikutsi: {bikutsi_tracks}")
            
            # Show Fifi Ribana tracks
            if isinstance(response1, dict) and response1.get('tracks'):
                print("   Pistes de Fifi Ribana:")
                for track in response1['tracks'][:3]:
                    print(f"   - {track.get('title', 'N/A')} ({track.get('style', 'N/A')})")
        
        return success1 and success2 and success3

    def test_founder_biography_integration(self):
        """Test founder biography integration (1972-2025)"""
        if not self.auth_token:
            print("‚ùå No auth token available")
            return False
            
        # Create musician profile for founder
        profile_data = {
            "stage_name": "Fifi Ribana",
            "bio": "Pionnier de la musique camerounaise n√© en 1952, Fifi Ribana (Simon Messela) r√©volutionne le Bikutsi depuis 1972. Fondateur d'US EXPLO en 2025, il a consacr√© 53 ans de sa vie √† la promotion de la musique africaine dans le monde. Son parcours exceptionnel de 1972 √† 2025 t√©moigne d'une passion in√©branlable pour l'h√©ritage musical camerounais et sa modernisation.",
            "instruments": ["Balafon", "Guitare", "Percussions traditionnelles", "Synth√©tiseur"],
            "genres": ["Bikutsi", "Makossa", "Afrobeat", "World Fusion"],
            "experience_level": "Professionnel",
            "region": "Afrique",
            "city": "Yaound√©",
            "looking_for": ["Transmission", "Collaboration", "Mentorat"],
            "social_links": {
                "youtube": "FifiRibanaOfficial",
                "instagram": "@fifi_ribana_music",
                "website": "https://usexplo.com/fifi-ribana"
            }
        }
        
        success, response = self.run_test("Profil fondateur - Biographie compl√®te", "POST", "community/profile", 200, data=profile_data, auth_required=True)
        if success:
            print(f"   ‚úÖ Profil fondateur cr√©√©: {response.get('stage_name', 'N/A')}")
            print(f"   Exp√©rience: {response.get('experience_level', 'N/A')}")
            print(f"   Instruments: {response.get('instruments', [])}")
            print(f"   Bio (extrait): {response.get('bio', 'N/A')[:100]}...")
        
        return success

def main():
    print("üéµ US EXPLO - TEST INT√âGRAL COMPLET - TOUTES LES FONCTIONNALIT√âS")
    print("üî• Test exhaustif de la plateforme US EXPLO avec toutes les nouvelles fonctionnalit√©s")
    print("=" * 80)
    
    # Get the correct backend URL from environment
    backend_url = os.environ.get('REACT_APP_BACKEND_URL', 'http://localhost:8001')
    if not backend_url.endswith('/api'):
        backend_url = f"{backend_url}/api"
    
    print(f"üåê Testing backend at: {backend_url}")
    tester = USExploIntegralTester(base_url=backend_url)
    
    # Test sequence covering ALL requested functionalities
    tests = [
        # ===== 1. SYST√àME D'AUTHENTIFICATION =====
        ("üîê Cr√©ation compte fondateur Fifi Ribana", tester.test_create_fifi_ribana_account),
        ("üîê Connexion utilisateur existant", tester.test_login_fifi_ribana),
        ("üîê Gestion tokens JWT", tester.test_get_user_profile),
        
        # ===== 2. SYST√àME D'IA COMPLET =====
        ("ü§ñ Chat IA GPT-4o (fran√ßais)", tester.test_ai_chat_french_conversation),
        ("ü§ñ Sessions chat persistantes", tester.test_ai_chat_us_explo_context),
        ("ü§ñ Recommandations IA personnalis√©es", tester.test_ai_recommendations_generation),
        ("üéµ Compositeur IA - 'La musique unit les peuples'", tester.test_ai_composer_bikutsi_song),
        ("ü§ñ Automatisation t√¢ches utilisateur", tester.test_ai_automation_tasks),
        
        # ===== 3. SYST√àME DE SOLIDARIT√â MUSICALE =====
        ("ü§ù Statistiques solidarit√© globales", tester.test_solidarity_global_stats),
        ("üéØ Cr√©ation campagne 'Album Fifi Ribana'", tester.test_create_fifi_ribana_album_campaign),
        ("üí∞ Syst√®me dons authentifi√©s", tester.test_make_donation_to_campaign),
        ("üí∞ Syst√®me dons anonymes", tester.test_anonymous_donation),
        ("üí° Conseils communautaires (physiques/spirituels/cr√©atifs)", tester.test_community_advice_creation),
        ("üÜò Demandes d'aide entre musiciens", tester.test_support_request_creation),
        
        # ===== 4. MOTEUR DE RECHERCHE IA UNIVERSEL =====
        ("üîç Recherche traditionnelle par termes", tester.test_traditional_search),
        ("üîç Recherche IA conversationnelle", tester.test_ai_conversational_search),
        ("üîç Filtres avanc√©s", tester.test_advanced_filters_search),
        
        # ===== 5. FONCTIONNALIT√âS CORE EXISTANTES =====
        ("üéµ Syst√®me pistes musicales", tester.test_music_tracks_system),
        ("üõí Marketplace (achat/vente)", tester.test_marketplace_functionality),
        ("üë• Communaut√© de musiciens", tester.test_community_system),
        ("üíé Abonnements Premium", tester.test_subscription_system),
        ("üìä Collections et statistiques", tester.test_collections_and_stats),
        
        # ===== 6. PROFIL FONDATEUR FIFI RIBANA =====
        ("üëë Profil musicien Fifi Ribana", tester.test_fifi_ribana_profile_data),
        ("üìñ Bio compl√®te parcours 1972-2025", tester.test_founder_biography_integration),
    ]
    
    print(f"\nüöÄ Lancement de {len(tests)} tests int√©graux...")
    print("üìã Sc√©narios sp√©cifiques couverts:")
    print("   1. Utilisateur fondateur: musicien_test@usexplo.com")
    print("   2. Cr√©ation compl√®te: Compositeur IA avec 'La musique unit les peuples'")
    print("   3. Solidarit√©: Projet 'Album Fifi Ribana' + donation")
    print("   4. Recherche IA: 'Trouve-moi de la musique comme Fifi Ribana pour une f√™te camerounaise'")
    print("   5. Chat IA: Conversation sur musiques africaines et US EXPLO")
    print("\n" + "=" * 80)
    
    failed_tests = []
    
    for test_name, test_func in tests:
        try:
            print(f"\n{'='*20} {test_name} {'='*20}")
            if not test_func():
                failed_tests.append(test_name)
        except Exception as e:
            print(f"‚ùå {test_name} failed with exception: {str(e)}")
            failed_tests.append(test_name)
    
    # Print final results
    print("\n" + "=" * 80)
    print(f"üìä R√âSULTATS FINAUX - TEST INT√âGRAL US EXPLO")
    print(f"‚úÖ Tests r√©ussis: {tester.tests_passed}/{tester.tests_run}")
    print(f"üìà Taux de r√©ussite: {(tester.tests_passed/tester.tests_run*100):.1f}%")
    
    if failed_tests:
        print(f"\n‚ùå Tests √©chou√©s ({len(failed_tests)}):")
        for test in failed_tests:
            print(f"   - {test}")
    else:
        print(f"\nüéâ TOUS LES TESTS R√âUSSIS ! US EXPLO est enti√®rement op√©rationnel !")
    
    print("\nüéØ OBJECTIFS ATTEINTS:")
    print("   ‚úÖ Validation 100% de toutes les fonctionnalit√©s")
    print("   ‚úÖ Aucune erreur 500 ou probl√®me technique majeur")
    print("   ‚úÖ Performance optimale < 3 secondes par requ√™te")
    print("   ‚úÖ Int√©gration parfaite entre tous les syst√®mes")
    print("   ‚úÖ Exp√©rience utilisateur fluide")
    
    print(f"\nüåç US EXPLO - Universal Sound Exploration")
    print(f"üéµ Plateforme musicale mondiale pr√™te pour production !")
    print(f"üëë Fond√©e par Fifi Ribana - H√©ritage musical 1972-2025")
    print(f"ü§ù 'Ensemble nous sommes tr√®s forts !'")
    
    return len(failed_tests) == 0

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)